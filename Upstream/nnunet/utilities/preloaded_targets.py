import torch


def get_targets():
    task_0_means = [
        torch.Tensor([
            [ 0.0868,  0.2189, -0.0762],
            [-0.0241,  0.1768,  0.1415],
            [-0.1274,  0.1446, -0.0923],
            [-0.1582,  0.1068,  0.1131],
            [-0.1196,  0.1668, -0.0632],
            [ 0.1136,  0.3486,  0.1091],
            [ 0.1082,  0.3723, -0.1810],
            [ 0.0055,  0.4568,  0.0323],
            [ 0.2677,  0.4324, -0.0380],
            [ 0.1717,  0.5280,  0.0414]
            ]), 
        torch.Tensor([
            [-6.3113e-01, -1.8237e-01, -1.0594e+00],
            [-5.6336e-01,  2.5742e-04, -9.7476e-01],
            [-7.9975e-01, -2.0712e-01, -6.9980e-01],
            [-7.4724e-01, -2.2123e-01, -1.0784e+00],
            [-6.1983e-01, -3.8044e-01, -7.4813e-01],
            [-8.8149e-01, -8.9623e-02, -1.0470e+00],
            [-8.9919e-01, -3.3171e-01, -1.0379e+00],
            [-8.5790e-01, -2.7328e-01, -6.7796e-01],
            [-4.3219e-01, -3.3556e-01, -8.3056e-01],
            [-8.9714e-01, -3.9595e-01, -9.3146e-01]
            ])
    ] 
    task_0_vars = [torch.stack([0.0333 * torch.eye(3) for _ in range(10)]) for _ in range(2)]
    task_0_weights = [0.10 * torch.ones(10) for _ in range(2)]
    task_0_min_dists = [0.4743416490252569, 0.4743416490252569, 0.4743416490252569]

    task_1_means = [torch.Tensor([[ 0.0559, -0.0267,  0.6485],
        [ 0.2927, -0.4103,  1.0492],
        [ 0.0357, -0.3989,  0.7851],
        [ 0.1157, -0.1046,  0.5996],
        [ 0.0694, -0.0282,  0.9927],
        [ 0.3546, -0.0593,  0.8763],
        [ 0.2051, -0.2990,  0.6971],
        [ 0.0691, -0.1699,  0.6337],
        [ 0.0776, -0.0178,  0.6041],
        [ 0.2110, -0.1217,  0.5942]]), torch.Tensor([[ 5.6329e-01,  8.5103e-01, -1.3694e-01],
        [ 8.6905e-01,  6.4917e-01,  2.8060e-02],
        [ 5.9944e-01,  8.6593e-01, -5.4557e-03],
        [ 5.0915e-01,  8.6257e-01,  2.3005e-02],
        [ 4.8423e-01,  5.9480e-01, -1.6741e-02],
        [ 6.5120e-01,  7.3832e-01, -1.5184e-01],
        [ 8.7470e-01,  7.1972e-01,  7.7095e-02],
        [ 8.9424e-01,  7.2595e-01,  1.7351e-02],
        [ 5.2063e-01,  8.7391e-01, -7.5214e-04],
        [ 5.3131e-01,  8.8329e-01,  2.3019e-01]])] 
    

    task_2_means = [torch.Tensor([[-1.1327, -1.1361, -0.1108],
        [-1.1234, -0.8353, -0.1558],
        [-1.0248, -0.7008,  0.2149],
        [-0.8502, -0.8024,  0.0680],
        [-0.9315, -0.9112,  0.2204],
        [-1.1395, -0.7454, -0.1093],
        [-1.1386, -0.9809, -0.0355],
        [-0.9272, -0.8634,  0.2146],
        [-0.9066, -1.1517, -0.1497],
        [-1.1508, -0.7642,  0.0614]]), torch.Tensor([[-0.0622,  0.7427, -0.5830],
        [ 0.2256,  0.7553, -0.7954],
        [-0.0667,  0.8179, -0.5527],
        [-0.1536,  0.7453, -0.6637],
        [-0.1199,  1.0465, -0.6069],
        [ 0.1719,  0.7512, -0.7018],
        [ 0.2746,  1.0434, -0.8411],
        [ 0.0733,  0.6581, -0.8841],
        [-0.0527,  0.9832, -0.5240],
        [ 0.0303,  0.9955, -0.9311]])]

    task_3_means = [torch.Tensor([[-0.5366, -0.7079,  0.0078],
        [-0.5804, -0.7451,  0.1185],
        [-0.6887, -1.0589,  0.2159],
        [-0.7119, -0.6870,  0.2590],
        [-0.7375, -0.9793,  0.0812],
        [-0.4859, -1.1000,  0.1389],
        [-0.5208, -0.6985, -0.0247],
        [-0.7564, -1.0827,  0.0414],
        [-0.4357, -1.0319,  0.4030],
        [-0.7532, -0.9563, -0.0625]]), torch.Tensor([[-0.0258,  0.2710, -0.3260],
        [ 0.1419,  0.1711, -0.6364],
        [ 0.1580,  0.5680, -0.3490],
        [ 0.2353,  0.5020, -0.4069],
        [ 0.3084,  0.5009, -0.4866],
        [ 0.0665,  0.1260, -0.5716],
        [ 0.2319,  0.1549, -0.4051],
        [ 0.3276,  0.3195, -0.2502],
        [ 0.1588,  0.4471, -0.3926],
        [ 0.1750,  0.2251, -0.2717]]), torch.Tensor([[ 0.7865,  0.9958, -1.0311],
        [ 0.6338,  0.8586, -0.7880],
        [ 0.6207,  1.0948, -0.9080],
        [ 0.8458,  0.7758, -0.9271],
        [ 0.9786,  0.8609, -0.8616],
        [ 0.6915,  0.8760, -0.8983],
        [ 0.8497,  0.9939, -0.9943],
        [ 0.9220,  1.1001, -1.0655],
        [ 0.7764,  0.8546, -1.0353],
        [ 0.6268,  0.8492, -0.7131]])]

    task_3_vars = [torch.stack([0.0333 * torch.eye(3) for _ in range(10)]) for _ in range(3)]
    task_3_weights = [0.10 * torch.ones(10) for _ in range(3)]
    task_3_min_dists = [0.4743416490252569, 0.4743416490252569, 0.4743416490252569]


    tasks_mus = [task_0_means, task_1_means, task_2_means, task_3_means]
    tasks_sigs = [task_0_vars for _ in range(3)] + [task_3_vars]
    tasks_weights = [task_0_weights for _ in range(3)] + [task_3_weights]
    tasks_min_dists = [task_0_min_dists for _ in range(4)]
    tasks_min_dist = [max(tmd) for tmd in tasks_min_dists]

    for task_id in range(4):
        if torch.cuda.is_available():
            # for class_idx in range(self.num_components):
            tsk_cls = 2 if task_id != 3 else 3
            for class_idx in range(tsk_cls):
                # self.print_to_log_file(f"prev size {t}: {[m.size() for m in self.mus[t]]}")
                tasks_mus[task_id][class_idx] = tasks_mus[task_id][class_idx].cuda()
                tasks_sigs[task_id][class_idx] = tasks_sigs[task_id][class_idx].cuda()
                tasks_weights[task_id][class_idx] = tasks_weights[task_id][class_idx].cuda()
                # self.choleskys[t] = self.choleskys[t].cuda()




    return tasks_mus, tasks_sigs, tasks_weights, tasks_min_dists, tasks_min_dist
